pipeline {
    agent any


    environment {
        KUBE_CONFIG_FILE = credentials('kubeconfig')


    }

    stages {
        stage('Pull from GitHub') {
            steps {
                // Pull code from GitHub
                git branch: 'main', url: 'https://github.com/GhassenAbida/tp.git'
            }
        }

    
        //stage('sonarqube_scanner') {
            // steps {
            //    sh '/opt/sonar-scanner-5.0.1.3006/bin/sonar-scanner   -Dsonar.projectKey=ghassen   -Dsonar.sources=.   -Dsonar.host.url=http://172.17.0.1:9000   -Dsonar.token=sqp_97e55582584aff36da2e870c0499239edf7ac991 '
          //  }
        //}

        stage('Build Docker Image') {
            steps {
                // Build Docker image
                sh 'docker build -t mymage .'
         }
       }
       // stage('Push Docker Image') {
     //       steps {
   //             // Push Docker image
  //              sh 'docker login -u ghassenlbabida -p ghassen123 '
 //               sh 'docker tag my-image ghassenlbabida/my-image:latest'
 //               sh 'docker push ghassenlbabida/my-image:latest'
 //           }
 //       }
// stage('Terraform Init and Plan') {
          //  steps {
            //    sh 'terraform init -input=false'
              //  sh 'terraform plan -input=false -out=tfplan'
            //}
        //}

        //stage('Terraform Apply') {
          //  steps {
            //    sh 'terraform apply -input=false -auto-approve tfplan'
            //}
        //}
  stage('Run Tests') {
            steps {
                script {
                    try {
                        sh 'npm install'
                        sh 'npm test'
                    } catch (ex) {
                        // Test failed, but we're catching the error to not fail the build
                        echo "Tests failed, but the pipeline will continue."
                    }
                }
            }
        }
        stage('k8s') {
            steps {

                sh ' export KUBECONFIG=$KUBE_CONFIG_FILE && kubectl run mmmp --image=ghassenlbabida/my-image:latest '
            }
        }
     stage('Ansible Deployment') {
            steps {
               
                    sh 'ansible-playbook -i inventory.yml playbook.yml'
                
            }
        }

     //   stage('prometheus & grafana') {
       //     steps {

         //       sh ' helm repo add prometheus-community https://prometheus-community.github.io/helm-charts '
           //     sh ' helm repo update'
             //   sh ' kubectl create ns monitoring' 
               // sh ' helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring'
           // }
        //}



        }
}
